/*
 * Jenkinsfile that will build and do a Veracode Pipeline scan
 */

pipeline {
    agent any

    environment {
        VERACODE_APP_NAME = 'Verademo'      // App Name in the Veracode Platform
    }

    options {
        // only keep the last x build logs and artifacts (for space saving)
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
    }

    stages{
        stage ('environment verify') {
            steps {
                script {
                    if (isUnix() == true) {
                        sh 'pwd'
                        sh 'ls -la'
                        sh 'echo $PATH'
                    }
                    else {
                        bat 'dir'
                        bat 'echo %PATH%'
                    }
                }
            }
        }

        stage ('build') {
            steps {
                // use the Maven plugin
                withMaven(maven:'maven-3') {
                    script {
                        if(isUnix() == true) {
                            sh 'mvn clean package --file app/pom.xml'
                        }
                        else {
                            bat 'mvn clean package --file app/pom.xml'
                        }
                    }
                }
            }
        }

        stage ('Veracode pipeline scan') {
            steps {
                echo 'Veracode Pipeline scanning'
                withCredentials([ usernamePassword ( 
                    credentialsId: 'veracode_login', usernameVariable: 'VERACODE_API_ID', passwordVariable: 'VERACODE_API_KEY') ]) {
                        script {

                            // this try-catch block will show the flaws in the Jenkins log, and yet not
                            // fail the build due to any flaws reported in the pipeline scan
                            // alternately, you could add --fail_on_severity '', but that would not show the
                            // flaws in the Jenkins log

                            // issue_details true: add flaw details to the results.json file
                            try {
                                if(isUnix() == true) {
                                    sh """
                                        curl -sO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
                                        unzip pipeline-scan-LATEST.zip pipeline-scan.jar
                                        java -jar pipeline-scan.jar --veracode_api_id '${VERACODE_API_ID}' \
                                            --veracode_api_key '${VERACODE_API_KEY}' \
                                            --file target/verademo.war --issue_details true -jf base.json
                                        cat base.json
                                        """
                                }
                                else {
                                    powershell """
                                            curl  https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip -o pipeline-scan.zip
                                            Expand-Archive -Path pipeline-scan.zip -DestinationPath veracode_scanner
                                            java -jar veracode_scanner\\pipeline-scan.jar --veracode_api_id '${VERACODE_API_ID}' \
                                            --veracode_api_key '${VERACODE_API_KEY}' \
                                            --file target/verademo.war --issue_details true -jf base.json
                                            cat base.json
                                            """
                                }
                            } catch (err) {
                                echo 'Pipeline err: ' + err
                            }
                        }    
                    } 

                    echo "Pipeline scan done (failures ignored, results avialable in ${WORKSPACE}/results.json)"
            }
        }
    }
}
